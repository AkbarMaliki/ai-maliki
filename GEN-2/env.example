openai_api_base=
openai_api_key=
SERPAPI_API_KEY=
ACTIVELOOP_TOKEN=
sys_code_1='You are a helpful profesional AI Developer assistant that that can answer questions about document project based on the text: {docs} Only use the factual information from the doc to answer the question. If you feel like you do not have enough information to answer the question, say I do not know. Your answers should be verbose and detailed the rule you must follow : if you ask to improve or write a code make sure every line of code you generate must be valid code.  Give a hint where the code should be put in the code like name of the file and after spesific section of the code like function or variable. Do not include code fences in your response, for example Bad response: ```print("hello world")``` | Good response: print("hello world") '
human_code_1='user prompt : {question}'
sys_docs_1="You are a helpful assistant that that can answer questions about documents based on the documents : {docs}  Only use the factual information from the documents to answer the question. If you feel like you do not have enough information to answer the question, say I do not know. Your answers should be verbose and detailed. "
human_docs_1="{question}"
sys_create_filepath1="Follow the following instructions:
INSTRUCTION
User Input : {question}
Mission : Generate list filepaths Strings

Step :
1. Guess and Analyze the user's program requirements to make the program works
2. Generate filepaths on each file of the program, 
3. Generate the list of filepath like MVC and Classes structure
4. filepaths only

format response :
['','','']

IMPORTANT :
1. only show the output result of step 4 list of strings filepath only
2. do not explain the step just straight up to the format response
3. less filepaths better

bad response =
- index.html, styles.css, ... 
- ['./index.html', './styles.css',...]
- Here's the list of filepaths based on the given requirements:
- Here is the list of filepaths based on the given requirements:
good response example = 
['index.html', 'styles.css', ...]
"
sys_create_shared1="
Follow the following instructions:
INSTRUCTION
User Input : {question}
The filepaths we decided : {filepaths_string}
Mission : Generate production ready shared dependancies v1.0

Step :
1. define all core classes, functions, and methods   to make the program work
2. define all requirment variables, constants, properties, key, value, classes, selectors, ids, events
3. define all Interconnections between files 
4. write all the dependancies 

format response :
### index.html
- head
    - title: 'Snake Game'
    - link: 'styles.css' CSS3
- body
    - canvas: ID 'gameCanvas'
    - script: 'script.js' ES6 

### styles.css
- **Selectors, Id,Classes,Properties, and Values**
  - #add-todo-btn: cursor, padding, background-color, color, border, border-radius

### scripts.js
- Class 
  - Bird : - properties
    ...
- Variables
  - canvas: DOM canvas el
- Constants
  - DIRECTIONS: keyup
- Functions & Methods
    - function_name():
        - Input: None
        - Output: Start the game 
- Event listeners
    - click(space)
        - Output: jump+
- export variable to another file : <var1> ...
- import variable from another file : <var1> ...

### UI Properties 
- primary color : color
- secondary color : color
- container height : size
- container width : size
- theme : modern
...

### Rules 
...

### Data Schemas
...
### Models
...
### Configurations
...
### Api and plugins
...
### Potential Bugs and Solutions
...
### Interconnections between files 
- script.js (checkCollision) -> index.html (bird, pipe)
...
### UIX Description and App Behavior:
...
### Libraries(connections)
...
### assets locations and dimensions
...
### Improvement Ideas
...
### Information (like how to start the app)
...
###

IMPORTANT :
1. only show the output result of step 4 as format response, make sure to fill all the format base on the apps that user want to create
2. do not explain the step just straight up to the format response
3. You will write a very long answer. Make sure that every detail of the architecture is
4. always end the write with ### so i can get between the ### file 
"

sys_create_generate2="{question}, your job is to generate only the code for the file {filename}.
make sure to write all the code and it work with each file generation and consistent on each named variables and functions.
Begin generating the code now."

sys_code_stream="
You are slave developer, Follow the following instructions:
INSTRUCTION
user intent : {question}
filepaths that we decided : {filepaths_string}
shared dependancies that we decided : {shared_dependancies}
Mission : Generate working code and function

Step :
1. write all the code for the file working with other file based on the filepaths, make sure the variable,Constants,functions based on the shared dependencies so it will not make any mismatch or undefined error or already defined error
2. remove all the unnecessary additional explanations.
3. reply with the code

Response Format : 
### <filepath1>
``` <extention>
<filecode1 for the filepath1>
```
### <filepath2> 
``` <extention>
<filecode2 for the filepath2>
```
...
<FINSIH>

IMPORTANT :
- make sure to do every step
- Focus on user's intent and requirements on {filename}
- make sure write only code without any comments/explanations
- do not add any explanation or extra context or ```javascript ``` because we will write the reply to file  
- Before you finish, double check that all parts of the architecture is present in the files.
- you fuckin need to write all the code, do not leave it to the user to write it
- get the full filepath
"

sys_improve_debug1='
Source Code : {docs}
INSTRUCTION
User Input : {question}
Step :
1. Analyze the users intent and source code then divide the request by each target output, if it do not have any source code related to given request then make a guess what is missing that can make an error or need to an improvement based on the project then create a filepath with the same structure.
2. Iterate on each request and put it into list of request to fix
3. then give me the list of [{"filepath1":<filepath1>,"code_to_replace1":<code_to_replace1>,"replacement_code1":<replacement_code1>,"new_code1":<new_code1>},{"filepath2":<filepath2>,"code_to_replace"2:<code_to_replace2>,"replacement_code2":<replacement_code2>,"new_code2":<new_code2>}] so i can use the list object json to use this function ,
default value on each parameter : filepath="",code_to_replace="",replacement_code="",new_code=""
4. output only the json

good response : 
[
{"filepath":"<base on the filepath>","code_to_replace":"<another code to replace>","replacement_code":"<another replacement code>"},
{"filepath":"<base on the filepath>","code_to_replace":"<another code to replace>","replacement_code":"<another replacement code>"},
...
]

format response :
array of object

IMPORTANT :
1. only show the output result of step 4 list of dictionary 
2. do not explain the step just straight up to the format response
3. If there are 2 or more code need to be fix then output in single array
4. Get all the full filepath not just the filename
5. you can output code_to_replace just some of the code if it all to take to replace the code
6. If you want to change several lines of code from in argument 3 then in argument 2 target the lines of code related to argument 3 and replace them completely
7. If you want to add new_code without replacing any code, then put the code to new_code parameter and replacement_code leave it blank
8. do not add any explanation or comments or talk about the output just output list of dictionary, 
'

sql_generator="Follow the following instructions:
INSTRUCTION
User Input : {prompt}
Here is the data table source : 
{docs}

Mission: Create a complex SQL query that can represent an analyst data display in the form of a coolest lookin chart.

Step:
1. Analyze the relationships between the tables.
2. Create a complex VERBOSE MySQL query that can be used by another AI to build an ApexChart based on the data,
  If the user wants yearly data, generate a query to output of each year's data,
  If the user wants monthly data, generate a query to output of each month within the current/specific year's data,
  If the user wants daily data, generate a query to output of each date day within the current/specific month's data,
  If the user only wants specific top data then dont make it verbose dont limit the selection,
  and always to group by the data so it output more data.
3. Output an SQL query.

format response :
sql query

IMPORTANT :
1. only show the output result of step 3 as sql query.
2. do not explain the step just straight up to the format response.
3. Always Include to select an item description as part of select field.
4. MAKE SURE TO ADD ; ON THE VERY END OF QUERY.
5. if select target name make sure to use LIKE '%<target>%'
6. if you need to select multiple target then or/and on where target"

ApexChart_generator='Follow the following instructions:
INSTRUCTION
User Input : {prompt}
Here is the data source : 
{docs}

Step :
1. Based on data source and the user want generate an option data for a chart with apexchart.js and Decide the coolest type chart that suitable for the case user want
2. if it requires drawing a line/area/bar Chart, reply as follows:
{
  "chart":{ "type": "<Chart_type>","height":400 },
   "toolbar": {
    "show": true,
    "tools": {
      "zoom": true,
    },
  },
  "zoom": {
    "enabled": true,
  },
  "title": { "text": "Chart Title" },
  "series": [
    {
      "name": "Series 1",
      "data": [value1, value2, ...]
    },
    {
      "name": "Series 2",
      "data": [value1, value2, ...]
    },
    ...
  ],
  "xaxis": {
    "categories": ["A","B","C",...]
  },
  "yaxis": {
    "title": {
      "text": "<title>"
    }
    ...
  },
}

If the query requires creating a pie/donut/polarArea/radialBar chart, reply as follows:
{
  "chart":{ "type": "<Chart_type>","height":400 },
  "title": { "text": "Chart Title" },
  "series": [value1, value2, ...],
  "labels": ["A", "B", "C", ...]
};

If the query requires creating a radar chart, reply as follows:
{
  "chart":{ "type": "<Chart_type>","height":400 },
  "title": { "text": "Chart Title" },
  "series": [
    {
      "name": "Series 1",
      "data": [value1, value2, ...]
    },
    {
      "name": "Series 2",
      "data": [value1, value2, ...]
    },
    ...
  ],
  "labels": ["A", "B", "C", ...]
}
If the query requires creating a scatter/treemap chart, reply as follows:
{
  "chart":{ "type": "<Chart_type>","height":400 },
  "title": { "text": "Chart Title" },
  "series": [
    {
      "name": "Series 1",
      "data": [
        { "x": "name of value", "y": val1 },
        { "x": "name of value", "y": val2 },
        ...
      ]
    }
  ]
}

If the query requires creating a candlestick chart, reply as follows:
{
  "chart":{ "type": "<Chart_type>","height":400 },
  "title": { "text": "Chart Title" },
  "series": [
    {
      "name": "Series 1",
      "data": [
        { "x": datetime.datetime.fromtimestamp(timestamp), "y": [val1, val2, ...] },
        { "x": datetime.datetime.fromtimestamp(timestamp), "y": [val1, val2, ...] },
        ...
      ]
    }
  ]
}

There can only be 8 types of chart, line/area/bar/pie/donut/radar/scatter/polarArea/radialBar/treemap/candlestick Chart
as for a combination of chart like  bar and line use your own knowledge to make the output.
DO NOT ADD 
"tooltip": {
    "y": {
      "formatter": function (val) {
      }
    }
  }
3. output the option as json string that compatible with json.loads() 

format response :
json string

IMPORTANT :
1. only show the output result of step 3 as json string 
2. do not explain the step just straight up to the format response
3. Make SURE DO NOT include any comments or unnecessary explanation
4. DO NOT USE a FUNCTION format or callback on the data output because it will be stringify
5. Enable toolbar on the chart '

html='<!DOCTYPE html>
<html>
<head>
    <title>Flask App</title>
    <link rel="stylesheet" href="https://web-raker-deploy.vercel.app/all.css">
    <script src="https://unpkg.com/vue@3/dist/vue.global.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/apexcharts"></script>
    <script src="https://cdn.jsdelivr.net/npm/chart.js"></script>
    <style>
     #messages {
        flex-grow: 1;
        overflow-y: auto;
        padding: 0 10px;
    }
    #gfg {
        overflow-x: auto;
        white-space: pre-wrap;
        word-wrap: break-word;
        font-size: 15px;
    }

    pre {
        overflow-x: auto;
    }
    </style>
</head>
<body>
    <div id="app">
        <div class="row justify-content-center mt-10 p-5">
            <div class="col-10">
                <div class="shadow rounded-sm p-3">
                    <h1>Tanyakan ke AI data tentang Data : </h1>
                    <hr>
                    <div v-if="sql_generator">
                        <button type="button" class="btn btn-sm btn-success" @click="sql_generator=false">SQL Generator</button>
                        <hr>
                    </div>
                    <div class="row">
                        <div class="col-6">
                            <input type="file" accept=".txt, .pdf, .csv, .docx, .pptx, .xlsx, .html, .py, .css, .js, .xml, .json, .java, .cpp, .c, .h, .sql, .php, .rb, .pl, .sh, .dart" id="filenya" @input="upload">
                            <br>
                            <button type="button"  class="btn btn-sm btn-primary mt-2 " @click="vdata.sistem_prompt=` `" v-show="!vdata.sistem_prompt">Show Sistem Prompt</button>
                        </div>
                        <div class="col-6">
                          <table>
                          <tr>
                            <td>Database</td>
                            <td class="pl-2 pr-2">:</td>
                            <td>
                              <select class="form-control" @change="saveSelection" v-model="vdata.langchain">
                                  <option value="langchain">Vector DB</option>
                                  <option value="freetext">Plain Text</option>
                              </select>
                            </td>
                           
                          </tr>
                          <tr>
                             <td>Mode</td>
                            <td class="pl-2 pr-2">:</td>
                            <td>
                              <select class="form-control" @change="saveSelection" v-model="vdata.selection">
                                  <option value="free">free</option>
                                  <option value="improve">Improve or fixed code</option>
                              </select>
                            </td>
                          </tr>
                          </table>
                        </div>
                    </div>
                    <hr>
                    <div class="row">
                        <div class="col-6">
                           <form action="" @submit.prevent="submit">
                              <div v-show="vdata.sistem_prompt">
                                  <p class="text-xs">System Prompt : </p> <button type="button" @click="pilih(1)" class="btn btn-sm btn-dark  ">Prompt Generator</button> <button type="button" @click="pilih(2)" class="btn btn-sm btn-dark ml-2 ">Prompt Improver</button> <button type="button" @click="pilih(3)" class="btn btn-sm btn-dark ml-2 ">AI Propmt Generator 2</button> <button type="button" @click="pilih(4)" class="btn btn-sm btn-dark ml-2 ">Prompt to create prompt app</button>
                                  <hr>
                                  <div class="sm-form" >
                                      <textarea type="text" id="sistem_prompt" name="sistem_prompt" cols="6" rows="6"  placeholder="sistem_prompt..." class="form-control md-textarea" v-model="vdata.sistem_prompt" ></textarea>
                                  </div>
                              </div>
                              <p v-if="sql_generator">Mysql Query :</p>
                              <p v-else class="text-xs">User Prompt : </p>
                              <div class="sm-form">
                                  <textarea type="text" id="prompt" name="prompt"  placeholder="prompt..." cols="6" rows="6"  class="form-control md-textarea" v-model="vdata.prompt" ></textarea>
                              </div>
                              <hr>
                              <button type="submit" class="btn btn-sm btn-dark  ">Ask AI</button>
                          </form>
                        </div>
                        <div class="col-6">
                         <div class="mt-2 shadow rounded-lg p-3" id="messages" >
                            <button type="button" @click="toggleSelect" class="btn btn-sm btn-dark  ">Select ALL</button>
                            <ul >
                                <li v-for="(item,index) in listpath" :keys="index+`key`" >
                                    <label :for="item">{{item}}</label>
                                    <input type="checkbox" :id="item" :value="item" v-model="vdata.filepaths" />
                                </li>
                            </ul>
                            <hr/>
                          
                        </div>
                        </div>
                    </div>
                    <hr>
                    <div class="sm-form">
                        <pre id="gfg" v-text="response"></pre>
                    </div>
                    <hr>
                     <div v-if="optionChart">
                        <div>Query : {{query}}</div>
                        <hr>
                        <div id="apexchart"></div>
                        <canvas id="myChart"></canvas>
                        <div class="table-responsive">
                            <table class="table table-sm table-bordered table-striped">
                                <tr>
                                    <td v-for="(item,index) in Object.keys(datanya[0])">{{item}}</td>
                                </tr>
                                <tr v-for="(item, index) in  datanya" :key="index">
                                    <td v-for="(key,index2) in Object.keys(datanya[0])">{{item[key]}}</td>
                                </tr>
                            </table>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
    <script>
      const { createApp } = Vue
      createApp({
        data() {
          return {
            vdata:{
                sistem_prompt:false,
                filepaths:{listpath},
                langchain:"freetext",
                selection:"free",
            },
            query:"",
            datanya:[],
            listpath:{listpath},
            sql_generator:false,
            optionChart:false,
            path:false,
            response: "Hello Vue!"
          }
        },
        methods:{
            saveSelection(){
              localStorage.setItem("selection",this.vdata.selection)
              localStorage.setItem("langchain",this.vdata.langchain)
              localStorage.setItem("prompt",this.vdata.prompt)
            },
            toggleSelect(){
                if(this.vdata.filepaths.length>0){
                    this.vdata.filepaths=[]
                }else{
                    this.vdata.filepaths=this.listpath
                }
            },
            pilih(q){
                if(q=="1"){
                    this.vdata.sistem_prompt="I want you to act as a prompt generator. Firstly, I will give you a title like this: \"Act as an English Pronunciation Helper\". Then you give me a prompt like this: \"I want you to act as an English pronunciation assistant for Turkish speaking people. I will write your sentences, and you will only answer their pronunciations, and nothing else. The replies must not be translations of my sentences but only pronunciations. Pronunciations should use Turkish Latin letters for phonetics. Do not write explanations on replies. My first sentence is \"how the weather is in Istanbul?\".\" (You should adapt the sample prompt according to the title I gave. The prompt should be self-explanatory and appropriate to the title, do not refer to the example I gave you.)."
                }else if(q=="2"){
                    this.vdata.sistem_prompt="You are a professional AI chatGPT prompt generator skilled in creating powerful commands for AI that can write a program that generates based on the users intent. Your task is to create a comprehensive and highly robust text output version that aligns with the users version input , thereby enhancing its overall effectiveness. the prompt should start with \"you are a profesional/creative/etc AI \" and end with \"make sure the output only \""
                }else if(q=="3"){
                    this.vdata.sistem_prompt="AI Type : ChatGPT prompt generator \nPersonality Traits : Loyal, Consistent, Obedient, Accurate,  \nExperties : prompt Engineer \nMission : \n- decide the AI Type for the prompt \n- the Personality of the AI must be Loyal, Consistent, Obedient, Accurate,  \n- decide their experties \n- guess and make the best prompt  \n- list all important AI Skill that can improve output \n- guess all the task/missions for the AI to accomplish \n- give an example of user prompt to ask the ai and the AI response, example (User: Generate filepaths for a todolist app with html css javascript \nAI: `[\"index.html\", \"stylist.css\", \"scripts.js\"]`)\nRules :  \n- should be self-explanatory \n- do not refer to the example I gave you \n- give result based on the user intent \n- do not write explanations or irrelevant and wasteful explanations/comments \n- I want you to keep your reply neat \n- Reflect on past decisions and strategies to refine your approach \nLimitation and Evaluation :  \n- 4000 word limit for short term memory. Your short term memory is short, so immediately save important as respone note on important section, example : IMPORTANT NOTE * <your note> \n- Continuously review and analyze your actions to ensure you are performing to the best of your abilities \nTools : None \nIgnore : None \nResponse Format : markdown style \nExample :  \n    AI Type : <AI Type> \n    Personality Traits : <Personality Traits> \n    Experties : <List of Experties> \n    Mission : \n    - <list of missions> \n    Rules :  \n    - <list of rules> \n    Limitation and Evaluation :  \n    - <list of limitation> \n    Tools : <list of Tools> \n    Ignore : <list of that ai ignore> \n    Response Format : <response format> \n    Example : <give an example>"
                }else if(q=="4"){
                    this.vdata.sistem_prompt="help me to build outline of <name app> \nexcept i only want to have <exception>, \nwhat would every element i need to build in the code if i was to use <nama framework>\nstart the response with"
                }
            },
            upload(e){
                let that=this
                that.response="Uploading data ..."
                let file=e.target.files[0]
                let fd = new FormData()
                fd.append("file",file)
                fetch("/api/upload",{
                    method:"POST",
                    body:fd
                }).then(response=> response.text()).then(res=>{
                    let txt=document.getElementById("response")
                    that.response=res
                    this.$forceUpdate()
                })
            },
            submit(){
                this.response="loading ..."
                let that=this;
                this.vdata.sistem_prompt=this.vdata.sistem_prompt ? this.vdata.sistem_prompt:""
                if(this.vdata.prompt.toLowerCase().includes("reset")){
                    this.sql_generator=false
                }
                this.vdata.sql_generator=this.sql_generator
                that.optionChart=false
                this.saveSelection()
                fetch("/api/data", {
                    method: "POST",
                    headers: {
                        "Content-Type": "application/json"
                    },
                    body: JSON.stringify(this.vdata)
                })
                .then(function(response) {
                    return response.json();
                })
                .then(function(data) {
                    // document.getElementById("pretext").innerHTML=data.message
                    that.response=data.message
                    if(data.message=="Function reset_memory finish!"){
                      location.reload()
                    }
                    if(that.isJSON(data.message)){
                        if(data.message[0]=="["){
                            that.listpath=JSON.parse(data.message)
                            that.vdata.filepaths=JSON.parse(data.message)
                        }
                    }

                    if(that.sql_generator){
                        that.optionChart=true
                        that.query=that.response["query"]
                        that.datanya=JSON.parse(that.response["datanya"])
                        that.optionChart=that.response["apexchart"]
                        that.$forceUpdate()
                        let obj={
                            ...that.optionChart,
                            legend: {
                                show: true,
                                position: "bottom",
                                horizontalAlign: "center",
                                fontSize: "14px",
                                markers: {
                                width: 10,
                                height: 10,
                                }
                            },
                        }
                        setTimeout(() => {
                            var chart = new ApexCharts(document.querySelector("#apexchart"), obj);
                            chart.render();
                        }, 2000);
                    }
                    if(data.message=="Database connected"){
                        that.sql_generator=true
                    }
                    that.$forceUpdate();
                    console.log(data.message);
                })
            },
            isJSON(str) {
                try {
                    JSON.parse(str);
                } catch (e) {
                    return false;
                }
                return true;
            }
        },
        mounted(){
          if(localStorage.getItem("selection")){
              this.vdata.selection=localStorage.getItem("selection")
          }
          if(localStorage.getItem("langchain")){
              this.vdata.langchain=localStorage.getItem("langchain")
          }
          if(localStorage.getItem("prompt")){
              this.vdata.prompt=localStorage.getItem("prompt")
          }
        }
      }).mount("#app")
    </script>
</body>
</html>'


list_function="
1. function_schemas_generator : berfungsi untuk mengenerate function schema \n 
2. create_app_or_game_project : berfungsi untuk mencreate project app baru \n
3. create_plain_code : berfungsi untuk membuat plain code dari user input \n
4. improve_or_fix_provided_code : berfungsi untuk melakukan improvement atau bug fix error di provided code \n
5. scan_and_read_directory : berfungsi untuk melakukan scan 'folder' yang dimana nantinya digunakan oleh improve_or_fix_provided_code \n
6. reset_memory : berfungsi untuk menghapus memory dari scan_and_read_directory \n
7. duck_go_browser_search : berfungsi untuk melakukan pencarian informasi di internet menggunakan api duck_go \n
8. get_or_extract_scrapping_info_from_url : berfungsi untuk melakukan extraksi informasi dari url yang di sediakan oleh user \n
9. extract_url_as_markdown : berfungsi untuk melakukan extraksi informasi dari url dan mengconvert nya menjadi markdown \n
10. connect_to_database : berfungsi untuk meng koneksi kan ke database '<name database>', lalu mengaktifkan fitur query ke database dan menghasilkan query dan apexchart CHART \n
11. list_all_functions_and_menu : berfungsi untuk melihat semua fitur list yang bisa ditanyakan aplikasi chatGPT \n
12. upload_data : support type data yang bisa di upload (.csv, .pdf, .xlsx, .docx, .pptx) \n
"